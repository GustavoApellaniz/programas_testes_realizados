| Etapa | Comando                               | Explica√ß√£o pr√°tica                                                                              | Quando usar                                                    |
| ----- | ------------------------------------- | ----------------------------------------------------------------------------------------------- | -------------------------------------------------------------- |
| 1     | `git init`                            | Inicializa um reposit√≥rio Git **local** dentro da pasta atual. Cria a subpasta `.git/`.         | Apenas **uma vez** no in√≠cio de um projeto local novo.         |
| 2     | `git status`                          | Mostra o estado atual: arquivos modificados, adicionados, pendentes de commit etc.              | Use com frequ√™ncia para saber o que est√° acontecendo.          |
| 3     | `git add .`                           | Adiciona todos os arquivos modificados √† **√°rea de prepara√ß√£o (staging area)**.                 | Antes de fazer o commit.                                       |
| 4     | `git commit -m "mensagem"`            | Salva um ‚Äúsnapshot‚Äù (vers√£o) do seu c√≥digo localmente. A mensagem deve descrever a altera√ß√£o.   | Sempre ap√≥s adicionar (`git add`) e antes de enviar ao GitHub. |
| 5     | `git remote add origin <link>`        | Conecta seu reposit√≥rio local a um reposit√≥rio **remoto** (GitHub, GitLab etc).                 | Somente uma vez por projeto.                                   |
| 6     | `git push`                            | Envia os commits locais para o **reposit√≥rio remoto**.                                          | Ap√≥s o commit, quando quiser atualizar o GitHub.               |
| 7     | `git push --set-upstream origin main` | Define o branch remoto principal (upstream) e envia o c√≥digo.                                   | Primeira vez que fizer push de um branch novo.                 |
| 8     | `git branch`                          | Lista todas as branches locais e mostra qual est√° ativa.                                        | Para visualizar ou conferir onde voc√™ est√°.                    |
| 9     | `git checkout main`                   | Alterna para o branch `main` (ou outro).                                                        | Quando quiser mudar de branch.                                 |
| 10    | `git pull`                            | Baixa altera√ß√µes do GitHub para seu branch local.                                               | Antes de come√ßar a trabalhar, ou antes de fazer merge/push.    |
| 11    | `git merge <branch>`                  | Junta (mergeia) o c√≥digo de outra branch na branch atual.                                       | Depois de testar e finalizar uma funcionalidade.               |
| 12    | `git reflog`                          | Mostra o hist√≥rico completo de commits e movimenta√ß√µes (√∫til para recuperar vers√µes).           | Quando precisar voltar a uma vers√£o anterior.                  |
| 13    | `git reset --hard <c√≥digo>`           | Volta para uma vers√£o espec√≠fica e descarta altera√ß√µes locais.                                  | **Use com cuidado**, pois apaga mudan√ßas n√£o commitadas.       |
| 14    | `touch .gitignore`                    | Cria o arquivo `.gitignore`, que define o que o Git deve ignorar (ex: `.env`, `node_modules/`). | Logo no in√≠cio do projeto.                                     |

Criar e usar uma nova branch
git pull           # garante que a main est√° atualizada
git checkout -b nova-feature     # cria e muda para a nova branch
# trabalha e faz commits nessa branch
git add .
git commit -m "Nova funcionalidade X"


Atualizar a branch com as mudan√ßas da main

Antes de fazer merge, √© importante atualizar sua branch:

git checkout main
git pull                         # atualiza a main
git checkout nova-feature
git merge main                   # atualiza a branch com o que mudou na main


Finalizar e enviar a branch
git checkout main
git merge nova-feature           # une o c√≥digo da branch
git push origin main             # envia ao GitHub

Dica: apagar branch antiga localmente
git branch -d nova-feature

Remover branch do GitHub:
git push origin --delete nome-da-branch

git fetch -p - atualiza a lista local de branches remotas, removendo refer√™ncias antigas.
git branch -a - Para listar todas as branches (locais + remotas):




üîß Passo a passo completo para criar uma branch nova e fazer push no github

Crie e entre na nova branch

git checkout -b minha-branch

Isso cria e troca automaticamente para ela.

Adicione e fa√ßa commit das mudan√ßas

git add .
git commit -m "Implementa nova funcionalidade X"


Agora as altera√ß√µes est√£o salvas no seu reposit√≥rio local, dentro da branch.

Suba a branch para o GitHub

git push -u origin minha-branch


Explicando:

-u (ou --set-upstream) liga a sua branch local √† branch remota no GitHub.

origin √© o nome padr√£o do reposit√≥rio remoto.

minha-branch √© o nome da sua branch.

üëâ Depois desse primeiro push, voc√™ pode usar apenas:

git push